#!/usr/bin/env bash

# See: https://betterdev.blog/minimal-safe-bash-script-template/

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

call_dir=$( pwd )
source=${BASH_SOURCE[0]}
while [ -L "$source" ]; do # resolve $source until the file is no longer a symlink
  script_dir=$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )
  source=$(readlink "$source")
  [[ $source != /* ]] && source=$script_dir/$source # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
script_dir=$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "$source") [-h] [-V] [-r] [-st "Stage Title"] [-pt "Problem Title"] [-pv "problemVariable"] year stage problem

Script description here.

Available options:

-h, --help            Print this help and exit
-V, --verbose         Print script debug info
-r, --readme          Generate README.md entry
-st, --stage-title    Stage title (e.g. Qualification)
-pt, --problem-title  Problem title
-pv, --problem-var    Problem variable name
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  if [[ ! ${2-} -eq 1 || -o xtrace ]]
  then
    echo >&2 -e "${1-}"
  fi
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

create_folder() {
  local folder=$1
  if [ ! -d "${call_dir}/${folder}" ]
  then
    mkdir ${call_dir}/${folder}
  else
    msg "Directory ${folder} exists" 1
  fi
}

parse_params() {
  # default values of variables set from params
  readme=0
  stage_title=''
  problem_title=''
  problem_var=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -V | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -r | --readme) readme=1 ;; # flag to trigger README.md generation or entry
    -st | --stage-title)
      stage_title="${2-}"
      shift
      ;;
    -pt | --problem-title)
      problem_title="${2-}"
      shift
      ;;
    -pv | --problem-variable)
      problem_var="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  return 0
}

parse_params "$@"
setup_colors

# script logic here

cd ${script_dir}

YEAR=${args[0]:-$(date +"%Y")}
STAGE=${args[1]:-qualifying}
STAGETITLE=${stage_title:-${args[1]:-Qualification}}
PROBLEM=${args[2]:-problem-a}
PROBLEMTITLE=${problem_title:-${args[2]:-Problem A}}

STOREIFS=${IFS}
IFS='-'
PROBLEMVAR=${problem_var:-$(echo ${PROBLEM} | sed -e 's/\-+/ /g' | awk '{for (i=1; i<=NF; i++) printf toupper(substr($i, 1, 1)) tolower(substr($i,2)); print ""}' | awk '{$1=tolower(substr($1,0,1))substr($1,2)}1')}
IFS=${STOREIFS}

declare -a folders=("${YEAR}" "${YEAR}/${STAGE}" "${YEAR}/${STAGE}/${PROBLEM}" "${YEAR}/test" "${YEAR}/test/${STAGE}" ".github" ".github/workflows")

for i in "${folders[@]}"
do
  create_folder ${i}
done

if [ $readme -eq 1 ]
then
  if [ ! -f "${call_dir}/${YEAR}/README.md" ]
  then
    cp ../template/README.md ${call_dir}/${YEAR}/README.md
  else
    msg "File ${YEAR}/README.md exists" 1
  fi

  if [ $(grep -c "<!-- stage-end: ${STAGE} -->" ${call_dir}/${YEAR}/README.md) -eq 0 ]
  then
    awk '{gsub(/Title/,"'"${STAGETITLE}"'"); print}' ../template/README-stage.md | awk '{gsub(/id/,"'"${STAGE}"'"); print}' >> ${call_dir}/${YEAR}/README.md
  fi

  if [ $(grep -c "<!-- problem-end: ${STAGE}:${PROBLEM} -->" ${call_dir}/${YEAR}/README.md) -eq 0 ]
  then
    line=$(awk '/<!-- stage-end: '"${STAGE}"' -->/{ print NR-1; exit }' ${call_dir}/${YEAR}/README.md)
    head -${line} ${call_dir}/${YEAR}/README.md > tmp-README.md
    awk '{gsub(/Title/,"'"${PROBLEMTITLE}"'"); print}' ../template/README-problem.md | awk '{gsub(/id/,"'"${STAGE}"':'"${PROBLEM}"'"); print}' | awk '{gsub(/stage/,"'"${STAGE}"'"); print}' | awk '{gsub(/problem-a/,"'"${PROBLEM}"'"); print}' >> tmp-README.md
    tail +${line} ${call_dir}/${YEAR}/README.md >> tmp-README.md
    mv tmp-README.md ${call_dir}/${YEAR}/README.md
  fi
fi

if [ ! -f "${call_dir}/${YEAR}/${STAGE}/${PROBLEM}/index.js" ]
then
  cp ../template/stage/problem-a/index.js ${call_dir}/${YEAR}/${STAGE}/${PROBLEM}/index.js
else
  msg "File ${YEAR}/${STAGE}/${PROBLEM}/index.js exists" 1
fi

if [ ! -f "${call_dir}/${YEAR}/${STAGE}/${PROBLEM}/sample.in" ]
then
  cp ../template/stage/problem-a/sample.in ${call_dir}/${YEAR}/${STAGE}/${PROBLEM}/sample.in
else
  msg "File ${YEAR}/${STAGE}/${PROBLEM}/sample.in exists" 1
fi

if [ ! -f "${call_dir}/${YEAR}/test/package.json" ]
then
  cp ../template/test/package.json ${call_dir}/${YEAR}/test/package.json
else
  msg "File ${YEAR}/test/package.json exists" 1
fi

if [ ! -f "${call_dir}/${YEAR}/test/${STAGE}/${PROBLEM}.test.js" ]
then
  awk '{gsub(/template/,"'"${PROBLEMVAR}"'"); print}' ../template/test/stage/problem-a.test.js | awk '{gsub(/stage\/problem-a/,"'"${STAGE}"'/'"${PROBLEM}"'"); print}' > ${call_dir}/${YEAR}/test/${STAGE}/${PROBLEM}.test.js
else
  msg "File ${YEAR}/test/${STAGE}/${PROBLEM}.test.js exists" 1
fi

if [ ! -f "${call_dir}/.github/workflows/ci-${YEAR}.yml" ]
then
  awk '{gsub(/YYYY/,"'"${YEAR}"'"); print}' ../template/ci-YYYY.yml > ${call_dir}/.github/workflows/ci-${YEAR}.yml
else
  msg "File .github/workflows/ci-${YEAR}.yml exists" 1
fi
