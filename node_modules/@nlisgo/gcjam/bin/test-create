#!/usr/bin/env bash

# See: https://betterdev.blog/minimal-safe-bash-script-template/

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-V]

Script description here.

Available options:

-h, --help      Print this help and exit
-V, --verbose   Print script debug info
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  if [[ ! ${2-} -eq 1 || -o xtrace ]]
  then
    echo >&2 -e "${1-}"
  fi
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

check_file() {
  local file=$1
  if [ ! -f "./${file}" ]
  then
    die "File ${file} does not exist"
  fi
}

parse_params() {
  # default values of variables set from params

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -V | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  return 0
}

parse_params "$@"
setup_colors

# script logic here

cd ${script_dir}/../

rm -rf ./2122
rm -rf ./2999
rm -f ./.github/workflows/ci-2122.yml
rm -f ./.github/workflows/ci-2999.yml

./bin/create 2122

if [ -f "./2122/README.md" ]
then
  die "File 2122/README.md exists"
fi

declare -a files=("2122/qualifying/problem-a/index.js" "2122/qualifying/problem-a/sample.in" "2122/test/package.json" "2122/test/qualifying/problem-a.test.js" ".github/workflows/ci-2122.yml")

for i in "${files[@]}"
do
  check_file ${i}
done

./bin/create -r -st "My New Stage" -pt "My New Problem A" 2999 new-stage new-problem-a
./bin/create -r -pt "My New Problem B" 2999 new-stage new-problem-b
./bin/create -r -st "Final Stage" -pt "Final Problem A" 2999 final final-a

declare -a files=(".github/workflows/ci-2999.yml" "2999/README.md" "2999/test/package.json" "2999/new-stage/new-problem-a/index.js" "2999/new-stage/new-problem-a/sample.in" "2999/test/new-stage/new-problem-a.test.js" "2999/new-stage/new-problem-b/index.js" "2999/new-stage/new-problem-b/sample.in" "2999/test/new-stage/new-problem-b.test.js" "2999/final/final-a/index.js" "2999/final/final-a/sample.in" "2999/test/final/final-a.test.js")

for i in "${files[@]}"
do
  check_file ${i}
done

grep "^## My New Stage" ./2999/README.md > /dev/null 2>&1
grep "^### My New Problem A" ./2999/README.md > /dev/null 2>&1
grep "^### My New Problem B" ./2999/README.md > /dev/null 2>&1
grep "^## Final Stage" ./2999/README.md > /dev/null 2>&1
grep "^### Final Problem A" ./2999/README.md > /dev/null 2>&1
grep -Fn "cat ./new-stage/new-problem-a/sample.in | docker run -i -v \$(pwd):/app -w /app/new-stage/new-problem-a node node index.js" ./2999/README.md > /dev/null 2>&1
grep -Fn "docker run -it -v \$(pwd):/app -w /app/test node npm test new-stage/new-problem-a.test.js" ./2999/README.md > /dev/null 2>&1
grep -Fn "cat ./new-stage/new-problem-b/sample.in | docker run -i -v \$(pwd):/app -w /app/new-stage/new-problem-b node node index.js" ./2999/README.md > /dev/null 2>&1
grep -Fn "docker run -it -v \$(pwd):/app -w /app/test node npm test new-stage/new-problem-b.test.js" ./2999/README.md > /dev/null 2>&1
grep -Fn "cat ./final/final-a/sample.in | docker run -i -v \$(pwd):/app -w /app/final/final-a node node index.js" ./2999/README.md > /dev/null 2>&1
grep -Fn "docker run -it -v \$(pwd):/app -w /app/test node npm test final/final-a.test.js" ./2999/README.md > /dev/null 2>&1

grep -Fn "const newProblemA = require('../../new-stage/new-problem-a/index');" ./2999/test/new-stage/new-problem-a.test.js > /dev/null 2>&1
grep -Fn "const newProblemB = require('../../new-stage/new-problem-b/index');" ./2999/test/new-stage/new-problem-b.test.js > /dev/null 2>&1
grep -Fn "const finalA = require('../../final/final-a/index');" ./2999/test/final/final-a.test.js > /dev/null 2>&1

grep -Fn "name: Google Code Jam 2999" ./.github/workflows/ci-2999.yml > /dev/null 2>&1
grep -Fn "run: docker run -v \$(pwd)/2999:/app -w /app/test node /bin/bash -c \"npm install && npm test\"" ./.github/workflows/ci-2999.yml > /dev/null 2>&1

cd ${script_dir}/../2999/new-stage/new-problem-a

cat sample.in | node ./index.js

cd ${script_dir}/../2999/test

npm install && npm test
